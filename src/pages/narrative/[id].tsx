import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import styles from "../../../src/styles/Home.module.css";
import BackArrow from "@/components/Icons/BackArrow";
import SpetialText from "../../../data/SpetialText";


import { FakesBarChart } from "@/components/FakesBarChart/FakesBarChart";
import useLangSwitcher from "../../../utils/i18n/useLangSwitcher";
import { useState } from "react";
import dynamic from "next/dynamic";

const FakeList = dynamic(() => import("@/components/Fake/FakeList"), {
  loading: () => <p style={{ margin: "0 auto" }}>Loading...</p>,
});

const NarrativePage = () => {
  const router = useRouter();
  const { id } = router.query;
  const { data } = useLangSwitcher();

  const [tagName, setTagName] = useState("");

  const uniqueNarrativesEn: string[] = [];
  // @ts-ignore
  data.map((c) => {
    if (!uniqueNarrativesEn.includes(c.Narrative)) {
      uniqueNarrativesEn.push(c.Narrative);
    }
    return c;
  });

  const narrativeTitle = uniqueNarrativesEn.map((item, i) => {
    if (item === id) {
      return (
        <div key={i}>
          <h2 className={styles.narrativeHeading}>{item}</h2>
          <hr
            style={{
              height: "4px",
              background: "#FF2618",
              border: "none",
              width: "100%",
            }}
          />
        </div>
      );
    }
  });

  const narrativeDiscriptions: string[] = [];
  // @ts-ignore
  data.map((item) => {
    if (item.Narrative === id) {
      if (!narrativeDiscriptions.includes(item.Description)) {
        narrativeDiscriptions.push(item.Description);
      }
    }
  });

  const narrativeTags: string[] = [];
  // @ts-ignore
  data.map((item) => {
    if (item.Narrative === id) {
      // let tagItem = item.Tag.split(', ')
      if (!narrativeTags.includes(item.Tag)) {
        narrativeTags.push(item.Tag);
      }
    }
  });

  const uniqueNarrativeTags: string[] = [];

  // @ts-ignore
  const arrTagsTest = narrativeTags.map((item) => {
    return item.split(", ");
  });

  arrTagsTest.flat().map((item) => {
    if (!uniqueNarrativeTags.includes(item)) {
      uniqueNarrativeTags.push(item);
    }
  });

  const tagsList = uniqueNarrativeTags.map((tag, i) => (
    // <Link key={i} href={{ pathname: `/tag/${tag}` }}>
    <p
      key={i}
      className={tagName !== tag ? styles.tagName : styles.tagNameActive}
      onClick={() => setTagName(tag)}
    >
      #&nbsp;{tag}
    </p>
    // </Link>
  ));

  return (
    <>
      <Head>
        <title>Propaganda Diary </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.barChartWrap}>
        <FakesBarChart />
      </div>

      <div className={styles.narrativeContent}>
        <div>
          <Link href="/narratives">
            <BackArrow />
          </Link>
        </div>
        <div>{narrativeTitle}</div>
        <div>
          <p className={styles.caption}>
            <SpetialText name={"About_Narrative"} />:
          </p>

          <p
            className={styles.discription}
            dangerouslySetInnerHTML={{ __html: narrativeDiscriptions[0] }}
          ></p>
        </div>
        <div className={styles.narrativeTags}>
          <p className={styles.caption}>
            <SpetialText name={"Tags"} />:
          </p>

          <div className={styles.narrativeTag}>{tagsList}</div>
        </div>

        <hr
          style={{
            height: "2px",
            background: "#cccccc",
            border: "none",
            width: "100%",
            marginBottom: "2rem",
          }}
        />
        {/* @ts-ignore */}
        <FakeList narrative={id} tagName={tagName} />
      </div>
    </>
  );
};

export default NarrativePage;
